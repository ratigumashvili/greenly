generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String               @id @default(uuid())
  email                 String               @unique
  name                  String
  userName              String               @unique
  password              String?
  isAdmin               Boolean              @default(false)
  institution           String?
  department            String?
  disciplines           String?
  fields                String?
  interests             String?
  about                 String?
  vote                  Vote[]
  createdAt             DateTime             @default(now())
  createdSubcommunities Subcommunity[]
  SubcommunityMember    SubcommunityMember[]
  Post                  Post[]
  comments              Comment[] // ✅ Adds relation to comments
  votes                 CommentVote[] // ✅ Adds relation to comment votes
  Bookmark              Bookmark[]
}

model Subcommunity {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userEmail String?
  User      User?   @relation(fields: [userEmail], references: [email])

  tags    SubcommunityTag[]
  members SubcommunityMember[]
  Post    Post[]
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  subcommunities SubcommunityTag[]
}

model SubcommunityTag {
  subcommunityId String
  tagId          String

  subcommunity Subcommunity @relation(fields: [subcommunityId], references: [id])
  tag          Tag          @relation(fields: [tagId], references: [id])

  @@id([subcommunityId, tagId])
}

model SubcommunityMember {
  userId         String
  subcommunityId String
  role           String @default("member")

  user         User         @relation(fields: [userId], references: [id], onDelete: Restrict)
  subcommunity Subcommunity @relation(fields: [subcommunityId], references: [id], onDelete: Cascade)

  @@id([userId, subcommunityId])
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  file      String?
  imagesUrl String[] @default([])
  location  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vote      Vote[]

  authorId       String
  subcommunityId String
  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  subcommunity   Subcommunity @relation(fields: [subcommunityId], references: [id], onDelete: Cascade)
  Comment        Comment[]
  Bookmark       Bookmark[]
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

enum TypeOfVote {
  UP
  DOWN
}

model Vote {
  id       String     @id @default(uuid())
  Post     Post?      @relation(fields: [postId], references: [id])
  postId   String?
  User     User?      @relation(fields: [userId], references: [id])
  userId   String?
  voteType TypeOfVote
}

model Comment {
  id        String        @id @default(uuid())
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  postId    String
  parentId  String?
  authorId  String
  votes     CommentVote[]

  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model CommentVote {
  id        String     @id @default(uuid())
  commentId String
  userId    String
  voteType  TypeOfVote

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
